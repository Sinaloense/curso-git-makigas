# LEER #

## Crear nuevo repositorio dentro de la carpeta actual
`git init`

## Estado del repositorio
`git status`

- Existen 2 tipos de estados
    * unstaged `Archivo modificado (rojo)`
    * staged `Archivo listo para un proximo commit (verde)`



## Mover archivos de unstaged a staged
- Archivo individual
    * `git add fileName`
- Todos los archivos de la ruta actual
    * `git add .`

## Realizar cambios staged al repositorio con un comentario Vim
- Con comentario Vim
    * `git commit`

- Con comentario comentario directo
    * `git commit -a 'Comentario del commit'`

## Mostrar historial de commits en el repositorio
- Completo
    * `git log`
- Una linea
    * `git log --oneline`

## Mostrar que es lo que se ha editado
- Archivos unstaged y staged
    * `git diff`
- 2 commits
    * `git diff iD1 iD2`

## Actualizar mensaje del commit anterior con Vim (Esto actualiza el id del commit)
`git commit --ament`

## Desacer cambios de un archivo en estado modificado `Se perderan los cambios que no tengan commit`
- Archivo individual
    * `git checkout fileName`
- Todos los archivos de la ruta actual
    * `git checkout .`

## Mover archivos de staged a unstaged
- Archivo individual
    * `git restore --staged fileName`
- Todos los archivos de la ruta actual
    * `git restore --staged .`

## Uso de HEAD
- Obtener iD actual
`HEAD`
- Obtener iD antes del actual
`HEAD~1`
- Obtener iD 2 antes del actual
`HEAD~2`

## Eliminar commits que estan arriba del commit indicado `(Comando destructivo)`
- Eliminar commits y mantener cambios en unstaged
    * `git reset iD`
- Eliminar commits y mantener cambios en staged
    * `git reset iD`
- Eliminar commits y no mantener cambios
    * `git reset --hard iD`

## Revertir o desacer commit
- Revertir commit creando un commit que revierta los cambios
    * `git revert iD`
- Revertir commit sin hacer commit, dejando los cambios en staged `(Sirve para revertir mas de 1 commit)`
    * `git revert --no-commit iD`
    * Terminar y hacer el commit: `git revert --continue`